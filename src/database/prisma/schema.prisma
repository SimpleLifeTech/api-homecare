generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AllowanceCostOrigin {
  SUPPLIER
  HOMECARE
  PATIENT_FAMILY
  EMPLOYEE
}

enum CompanyType {
  HOMECARE
  SUPPLIER
}

model Branch {
  id        String    @id @default(uuid()) @db.Uuid
  companyId String    @map("company_id") @db.Uuid
  name      String    @db.VarChar(255)
  document  String    @db.VarChar(255)
  createdAt DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  company          Company            @relation(fields: [companyId], references: [id], map: "fk_company")
  employee         Employee[]
  profile          Profile[]
  department       Department[]
  companyFictional CompanyFictional[]
  planning         Planning[]

  @@map("branch")
}

model Company {
  id                String      @id @default(uuid()) @db.Uuid
  ownerId           String      @map("owner_id") @db.Uuid
  type              CompanyType
  name              String      @db.VarChar(255)
  companyImageUrl   String?     @map("company_image_url") @db.VarChar(255)
  address           String
  addressNumber     String      @map("address_number")
  addressComplement String?     @map("address_complement")
  addressCity       String      @map("address_city")
  addressState      String      @map("address_state")
  addressZipcode    String      @map("address_zipcode")
  document          String      @db.VarChar(255)
  createdAt         DateTime    @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?   @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt         DateTime?   @map("deleted_at") @db.Timestamp(6)

  branch            Branch[]
  service           Service[]
  healthPlan        HealthPlan[]
  patientHomecare   PatientRelationships[] @relation(name: "PatientHomecareRelationship")
  patientSupplier   PatientRelationships[] @relation(name: "PatientSupplierRelationship")
  homecareRelations CompanyRelationships[] @relation(name: "HomecareRelationship")
  supplierRelations CompanyRelationships[] @relation(name: "SupplierRelationship")

  person Person? @relation(fields: [ownerId], references: [id], map: "fk_person")

  @@map("company")
}

model CompanyFictional {
  id                String      @id @default(uuid()) @db.Uuid
  branchId          String      @map("branch_id") @db.Uuid
  type              CompanyType
  name              String      @db.VarChar(255)
  createdAt         DateTime    @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?   @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt         DateTime?   @map("deleted_at") @db.Timestamp(6)

  branch                      Branch                 @relation(fields: [branchId], references: [id], map: "fk_branch")
  fictionalHomecareRelations  PatientRelationships[] @relation(name: "FictionalHomecareRelationship")
  fictionalSupplierRelations  PatientRelationships[] @relation(name: "FictionalSupplierRelationship")
  companyRelationshipHomecare CompanyRelationships[] @relation(name: "CompanyRelationshipHomecareFictional")
  companyRelationshipSupplier CompanyRelationships[] @relation(name: "CompanyRelationshipSupplierFictional")

  @@map("company_fictional")
}

model CompanyRelationships {
  id                  String    @id @default(uuid()) @db.Uuid
  homecareId          String?   @map("homecare_id") @db.Uuid
  supplierId          String?   @map("supplier_id") @db.Uuid
  homecareFictionalId String?   @map("homecare_fictional_id") @db.Uuid
  supplierFictionalId String?   @map("supplier_fictional_id") @db.Uuid
  createdBy           String    @map("created_by") @db.Uuid
  createdAt           DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt           DateTime? @map("deleted_at") @db.Timestamp(6)

  homecare          Company?          @relation(name: "HomecareRelationship", fields: [homecareId], references: [id], map: "fk_homecare")
  supplier          Company?          @relation(name: "SupplierRelationship", fields: [supplierId], references: [id], map: "fk_supplier")
  homecareFictional CompanyFictional? @relation(name: "CompanyRelationshipHomecareFictional", fields: [homecareFictionalId], references: [id], map: "fk_homecare_fictional")
  supplierFictional CompanyFictional? @relation(name: "CompanyRelationshipSupplierFictional", fields: [supplierFictionalId], references: [id], map: "fk_supplier_fictional")

  @@map("company_relationships")
}

model Department {
  id        String    @id @default(uuid()) @db.Uuid
  branchId  String    @map("branch_id") @db.Uuid
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  departmentEmployee DepartmentEmployee[]

  branch Branch @relation(fields: [branchId], references: [id], map: "fk_branch")

  @@map("department")
}

model DepartmentEmployee {
  id           String    @id @default(uuid()) @db.Uuid
  departmentId String    @map("department_id") @db.Uuid
  employeeId   String    @map("employee_id") @db.Uuid
  feature      String
  createdAt    DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt    DateTime? @map("deleted_at") @db.Timestamp(6)

  department Department @relation(fields: [departmentId], references: [id], map: "fk_department")
  employee   Employee   @relation(fields: [employeeId], references: [id], map: "fk_employee")

  @@map("department_employee")
}

model Employee {
  id                      String    @id @default(uuid()) @db.Uuid
  personId                String    @map("person_id") @db.Uuid
  branchId                String    @map("branch_id") @db.Uuid
  workRole                String    @map("work_role")
  workTime                Int       @map("work_time")
  dayOffTime              Int       @map("day_off_time")
  personalDocumentUrl     String?   @map("personal_document_url")
  professionalDocumentUrl String?   @map("professional_document_url")
  criminalRecordUrl       String?   @map("criminal_record_url")
  resumeUrl               String?   @map("resume_url")
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt               DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt               DateTime? @map("deleted_at") @db.Timestamptz

  person      Person               @relation(fields: [personId], references: [id])
  branch      Branch?              @relation(fields: [branchId], references: [id])
  profiles    Profile[]
  services    Service[]
  departments DepartmentEmployee[]

  @@map("employee")
}

model HealthPlan {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  document  String
  companyId String    @map("company_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  company Company @relation(fields: [companyId], references: [id])

  @@map("health_plan")
}

model Patient {
  id               String    @id @default(uuid()) @db.Uuid
  personId         String    @unique @map("person_id") @db.Uuid
  responsibleName  String?   @map("responsible_name")
  responsibleEmail String?   @map("responsible_email")
  responsiblePhone String?   @map("responsible_phone")
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt        DateTime? @map("deleted_at") @db.Timestamptz

  person        Person                 @relation(fields: [personId], references: [id])
  relationships PatientRelationships[]
  service       Service[]

  @@map("patient")
}

model Person {
  id                String    @id @default(uuid()) @db.Uuid
  name              String
  email             String
  password          String
  document          String    @unique
  birthdate         DateTime
  profileImageUrl   String?   @map("profile_image_url")
  phone             String
  address           String
  addressNumber     String    @map("address_number")
  addressComplement String?   @map("address_complement")
  addressCity       String    @map("address_city")
  addressState      String    @map("address_state")
  addressZipcode    String    @map("address_zipcode")
  isFirstAccess     Boolean   @default(true) @map("is_first_access")
  createdAt         DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  company          Company[]
  personPermission PersonPermission[]
  employee         Employee[]
  patient          Patient[]

  @@map("person")
}

model PersonPermission {
  id               String    @id @default(uuid()) @db.Uuid
  personId         String    @map("person_id") @db.Uuid
  rolePermissionId String    @map("role_permission_id") @db.Uuid
  createdAt        DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamp(6)

  person         Person          @relation(fields: [personId], references: [id], map: "fk_person")
  rolePermission RolePermission? @relation(fields: [rolePermissionId], references: [id], map: "fk_role_permision")

  @@map("person_permission")
}

model PatientRecord {
  id                     String    @id @default(uuid()) @db.Uuid
  patientRelationshipsId String    @map("patient_relationships_id") @db.Uuid
  actionType             String    @map("action_type")
  description            String
  attachmentUrl          String?   @map("attachment_url")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  createdBy              String    @map("created_by") @db.Uuid
  updatedAt              DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  updatedBy              String?   @map("updated_by") @db.Uuid
  deletedAt              DateTime? @map("deleted_at") @db.Timestamptz
  deletedBy              String?   @map("deleted_by") @db.Uuid

  patientRelationships PatientRelationships @relation(fields: [patientRelationshipsId], references: [id])

  @@map("patient_record")
}

model PatientRelationships {
  id                  String              @id @default(uuid()) @db.Uuid
  homecareId          String?             @map("homecare_id") @db.Uuid
  supplierId          String?             @map("supplier_id") @db.Uuid
  fictionalHomecareId String?             @map("fictional_homecare_id") @db.Uuid
  fictionalSupplierId String?             @map("fictional_supplier_id") @db.Uuid
  patientId           String              @map("patient_id") @db.Uuid
  healthPlanId        String?             @map("health_plan_id") @db.Uuid
  healthPlanPayment   Float?              @map("health_plan_payment")
  homecarePayment     Float?              @map("homecare_payment")
  requiredCareHours   Int                 @map("required_care_hours")
  customFields        Json?               @map("custom_fields")
  patientRecord       String?             @map("patient_record")
  notations           String?
  allowanceCostOrigin AllowanceCostOrigin @default(PATIENT_FAMILY) @map("allowance_cost_origin")
  allowanceCostPrice  Float?              @map("allowance_cost_price")
  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamptz
  createdBy           String              @map("created_by") @db.Uuid
  updatedAt           DateTime?           @updatedAt @map("updated_at") @db.Timestamptz
  updatedBy           String?             @map("updated_by") @db.Uuid
  deletedAt           DateTime?           @map("deleted_at") @db.Timestamptz
  deletedBy           String?             @map("deleted_by") @db.Uuid

  homecare          Company?          @relation(name: "PatientHomecareRelationship", fields: [homecareId], references: [id])
  supplier          Company?          @relation(name: "PatientSupplierRelationship", fields: [supplierId], references: [id])
  fictionalHomecare CompanyFictional? @relation(name: "FictionalHomecareRelationship", fields: [fictionalHomecareId], references: [id])
  fictionalSupplier CompanyFictional? @relation(name: "FictionalSupplierRelationship", fields: [fictionalSupplierId], references: [id])
  patient           Patient           @relation(fields: [patientId], references: [id])
  record            PatientRecord[]

  @@map("patient_relationships")
}

model Planning {
  id        String    @id @default(uuid()) @db.Uuid
  branchId  String    @map("branch_id") @db.Uuid
  month     String
  year      String
  createdBy String    @map("created_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  branch Branch @relation(fields: [branchId], references: [id], map: "fk_branch")

  statuses PlanningStatus[]

  @@map("planning")
}

model PlanningStatus {
  id         String    @id @default(uuid()) @db.Uuid
  planningId String    @map("planning_id") @db.Uuid
  name       String
  createdBy  String    @map("created_by") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz

  planning Planning @relation(fields: [planningId], references: [id])

  @@map("planning_status")
}

model Profile {
  id         String    @id @default(uuid()) @db.Uuid
  branchId   String?   @map("branch_id") @db.Uuid
  employeeId String    @map("employee_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz

  branch   Branch?  @relation(fields: [branchId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("profile")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  rolePermission RolePermission[]

  @@map("role")
}

model RolePermission {
  id        String    @id @default(uuid()) @db.Uuid
  roleId    Int       @map("role_id")
  feed      Boolean
  delete    Boolean
  createdAt DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  role             Role               @relation(fields: [roleId], references: [id])
  personPermission PersonPermission[]

  @@map("role_permission")
}

model Service {
  id          String    @id @default(uuid()) @db.Uuid
  companyId   String    @map("company_id") @db.Uuid
  patientId   String    @map("patient_id") @db.Uuid
  employeeId  String    @map("employee_id") @db.Uuid
  title       String
  description String?
  startAt     DateTime? @map("start_at") @db.Timestamptz
  startTime   String?   @map("start_time")
  endAt       DateTime? @map("end_at") @db.Timestamptz
  endTime     String?   @map("end_time")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  company  Company  @relation(fields: [companyId], references: [id])
  patient  Patient  @relation(fields: [patientId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("service")
}
