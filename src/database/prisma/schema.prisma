generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model person {
  id                 String              @id @default(uuid()) @db.Uuid
  name               String
  email              String
  password           String
  document           String
  image              String
  phone              String
  address            String
  address_number     String
  address_complement String?
  address_city       String
  address_state      String
  address_zipcode    String
  created_at         DateTime            @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)"))
  updated_at         DateTime            @updatedAt
  deleted_at         DateTime?
  company            company[]
  person_permission  person_permission[]
}

model person_permission {
  id                 String          @id @default(uuid()) @db.Uuid
  person_id          String          @db.Uuid
  role_permission_id String          @db.Uuid
  created_at         DateTime        @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @db.Timestamp(6)
  updated_at         DateTime?       @updatedAt @db.Timestamp(6)
  deleted_at         DateTime?       @db.Timestamp(6)
  person             person          @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person")
  role_permission    role_permission @relation(fields: [role_permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_permision")
}

model role {
  name            String
  created_at      DateTime          @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)"))
  updated_at      DateTime?         @updatedAt
  deleted_at      DateTime?
  id              Int               @id @default(autoincrement())
  role_permission role_permission[]
}

model role_permission {
  id                String              @id @default(uuid()) @db.Uuid
  role_id           Int
  feed              Boolean
  delete            Boolean
  created_at        DateTime            @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)"))
  updated_at        DateTime?           @updatedAt
  deleted_at        DateTime?
  person_permission person_permission[]
  role              role                @relation(fields: [role_id], references: [id])
}

model company {
  id         String    @id @default(uuid()) @db.Uuid
  person_id  String    @db.Uuid
  name       String    @db.VarChar(255)
  image      String?   @db.VarChar(255)
  document   String    @db.VarChar(255)
  created_at DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  branch     branch[]
  person     person    @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person")
}

model branch {
  id                 String    @id @default(uuid()) @db.Uuid
  company_id         String    @db.Uuid
  name               String    @db.VarChar(255)
  address            String    @db.VarChar(255)
  address_number     String    @db.VarChar(255)
  address_complement String?   @db.VarChar(255)
  address_city       String    @db.VarChar(255)
  address_state      String    @db.VarChar(255)
  address_zipcode    String    @db.VarChar(255)
  created_at         DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Sao_Paulo'::text)")) @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)
  deleted_at         DateTime? @db.Timestamp(6)
  company            company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company")
}
