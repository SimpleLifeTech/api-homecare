generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyType {
  HOMECARE
  SUPPLIER
}

enum AllowanceCostOrigin {
  SUPPLIER
  HOMECARE
  PATIENT_FAMILY
  EMPLOYEE
}

model Person {
  id                String    @id @default(uuid()) @db.Uuid
  name              String
  email             String
  password          String
  document          String    @unique
  birthdate         DateTime
  profileImageUrl   String?   @map("profile_image_url")
  phone             String
  address           String
  addressNumber     String    @map("address_number")
  addressComplement String?   @map("address_complement")
  addressCity       String    @map("address_city")
  addressState      String    @map("address_state")
  addressZipcode    String    @map("address_zipcode")
  isFirstAccess     Boolean   @default(true) @map("is_first_access")
  createdAt         DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  company          Company[]
  personPermission PersonPermission[]
  employee         Employee[]
  patient          Patient[]

  @@map("person")
}

model PersonPermission {
  id               String    @id @default(uuid()) @db.Uuid
  personId         String    @map("person_id") @db.Uuid
  rolePermissionId String    @map("role_permission_id") @db.Uuid
  createdAt        DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamp(6)

  person         Person          @relation(fields: [personId], references: [id], map: "fk_person")
  rolePermission RolePermission? @relation(fields: [rolePermissionId], references: [id], map: "fk_role_permision")

  @@map("person_permission")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  rolePermission RolePermission[]

  @@map("role")
}

model RolePermission {
  id        String    @id @default(uuid()) @db.Uuid
  roleId    Int       @map("role_id")
  feed      Boolean
  delete    Boolean
  createdAt DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  role             Role               @relation(fields: [roleId], references: [id])
  personPermission PersonPermission[]

  @@map("role_permission")
}

model Company {
  id                String      @id @default(uuid()) @db.Uuid
  ownerId           String      @map("owner_id") @db.Uuid
  type              CompanyType
  name              String      @db.VarChar(255)
  companyImageUrl   String?     @map("company_image_url") @db.VarChar(255)
  address           String
  addressNumber     String      @map("address_number")
  addressComplement String?     @map("address_complement")
  addressCity       String      @map("address_city")
  addressState      String      @map("address_state")
  addressZipcode    String      @map("address_zipcode")
  document          String      @db.VarChar(255)
  createdAt         DateTime    @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Bahia'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?   @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt         DateTime?   @map("deleted_at") @db.Timestamp(6)

  branch     Branch[]
  service    Service[]
  healthPlan HealthPlan[]
  person     Person?      @relation(fields: [ownerId], references: [id], map: "fk_person")

  supplierPatient PatientRelationships[] @relation("SupplierCompany")
  homecarePatient PatientRelationships[] @relation("HomecareCompany")

  @@map("company")
}

model Branch {
  id        String    @id @default(uuid()) @db.Uuid
  companyId String    @map("company_id") @db.Uuid
  name      String    @db.VarChar(255)
  document  String    @db.VarChar(255)
  createdAt DateTime  @default(dbgenerated("(CURRENT_TIMESTAMP AT TIME ZONE 'America/Sao_Paulo'::text)")) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  company  Company    @relation(fields: [companyId], references: [id], map: "fk_company")
  employee Employee[]
  profile  Profile[]

  @@map("branch")
}

model Planning {
  id        String    @id @default(uuid()) @db.Uuid
  month     String
  year      String
  createdBy String    @map("created_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  statuses PlanningStatus[]

  @@map("planning")
}

model PlanningStatus {
  id         String    @id @default(uuid()) @db.Uuid
  planningId String    @map("planning_id") @db.Uuid
  name       String
  createdBy  String    @map("created_by") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz

  planning Planning @relation(fields: [planningId], references: [id])

  @@map("planning_status")
}

model Employee {
  id        String    @id @default(uuid()) @db.Uuid
  personId  String    @map("person_id") @db.Uuid
  branchId  String?   @map("branch_id") @db.Uuid
  workRole  String?   @map("work_role")
  document  String?
  salary    Float?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  person   Person    @relation(fields: [personId], references: [id])
  branch   Branch?   @relation(fields: [branchId], references: [id])
  profiles Profile[]
  services Service[]

  @@map("employee")
}

model Profile {
  id         String    @id @default(uuid()) @db.Uuid
  branchId   String?   @map("branch_id") @db.Uuid
  employeeId String    @map("employee_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz

  branch   Branch?  @relation(fields: [branchId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("profile")
}

model PatientRecord {
  id                     String    @id @default(uuid()) @db.Uuid
  patientRelationshipsId String    @map("patient_relationships_id") @db.Uuid
  actionType             String    @map("action_type")
  description            String
  attachmentUrl          String?   @map("attachment_url")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  createdBy              String    @map("created_by") @db.Uuid
  updatedAt              DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  updatedBy              String?   @map("updated_by") @db.Uuid
  deletedAt              DateTime? @map("deleted_at") @db.Timestamptz
  deletedBy              String?   @map("deleted_by") @db.Uuid

  patientRelationships PatientRelationships @relation(fields: [patientRelationshipsId], references: [id])

  @@map("patient_record")
}

model Patient {
  id               String    @id @default(uuid()) @db.Uuid
  personId         String    @unique @map("person_id") @db.Uuid
  responsibleName  String?   @map("responsible_name")
  responsibleEmail String?   @map("responsible_email")
  responsiblePhone String?   @map("responsible_phone")
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt        DateTime? @map("deleted_at") @db.Timestamptz

  person        Person                 @relation(fields: [personId], references: [id])
  relationships PatientRelationships[]
  service       Service[]

  @@map("patient")
}

model PatientRelationships {
  id                  String              @id @default(uuid()) @db.Uuid
  supplierId          String              @map("supplier_id") @db.Uuid
  homecareId          String              @map("homecare_id") @db.Uuid
  patientId           String              @map("patient_id") @db.Uuid
  healthPlanId        String              @map("health_plan_id") @db.Uuid
  healthPlanPayment   Float               @map("health_plan_payment")
  homecarePayment     Float               @map("homecare_payment")
  schedule            Int
  customFields        Json                @map("custom_fields")
  patientRecord       String              @map("patient_record")
  notations           String
  allowanceCostOrigin AllowanceCostOrigin @map("allowance_cost_origin")
  allowanceCostPrice  Float?              @map("allowance_cost_price")
  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamptz
  createdBy           String              @map("created_by") @db.Uuid
  updatedAt           DateTime?           @updatedAt @map("updated_at") @db.Timestamptz
  updatedBy           String?             @map("updated_by") @db.Uuid
  deletedAt           DateTime?           @map("deleted_at") @db.Timestamptz
  deletedBy           String?             @map("deleted_by") @db.Uuid

  patient    Patient         @relation(fields: [patientId], references: [id])
  healthPlan HealthPlan      @relation(fields: [healthPlanId], references: [id])
  supplier   Company         @relation("SupplierCompany", fields: [supplierId], references: [id])
  homecare   Company         @relation("HomecareCompany", fields: [homecareId], references: [id])
  record     PatientRecord[]

  @@map("patient_relationships")
}

model HealthPlan {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  document  String
  companyId String    @map("company_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  company Company                @relation(fields: [companyId], references: [id])
  patient PatientRelationships[]

  @@map("health_plan")
}

model Service {
  id          String    @id @default(uuid()) @db.Uuid
  companyId   String    @map("company_id") @db.Uuid
  patientId   String    @map("patient_id") @db.Uuid
  employeeId  String    @map("employee_id") @db.Uuid
  title       String
  description String?
  startAt     DateTime? @map("start_at") @db.Timestamptz
  startTime   String?   @map("start_time")
  endAt       DateTime? @map("end_at") @db.Timestamptz
  endTime     String?   @map("end_time")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  company  Company  @relation(fields: [companyId], references: [id])
  patient  Patient  @relation(fields: [patientId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("service")
}
